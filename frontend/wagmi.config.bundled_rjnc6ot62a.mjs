// wagmi.config.ts
import { defineConfig } from "@wagmi/cli";
import fs from "fs";
import path from "path";
var dirEntries = [];
var deploymentsDir = path.join("..", "contracts", "ignition", "deployments");
try {
  dirEntries.push(
    ...fs.readdirSync(deploymentsDir, { recursive: true, withFileTypes: true })
  );
} catch (e) {
  if (!(e instanceof Error && "code" in e && e.code === "ENOENT")) {
    throw e;
  }
  console.warn(`No contracts found in ${deploymentsDir}. Deploy one first.`);
  process.exit(1);
}
var deployedAddressesEntries = dirEntries.filter((entry) => entry.name === "deployed_addresses.json");
var artifactEntries = dirEntries.filter(
  (entry) => entry.isFile() && entry.parentPath.includes("artifacts") && entry.name.endsWith(".json") && !entry.name.endsWith(".dbg.json")
);
if (artifactEntries.length === 0) {
  console.warn(`No contracts found in ${deploymentsDir}. Deploy one first.`);
  process.exit(1);
}
var abisByContractName = {};
for (const entry of artifactEntries) {
  const fileContents = fs.readFileSync(path.join(entry.parentPath, entry.name), "utf-8");
  const abi = JSON.parse(fileContents).abi;
  abisByContractName[entry.name.replace(/\.json$/, "")] = abi;
}
var deployedContracts = {};
var chainIdRegex = /(chain-)(\d+)/;
for (const entry of deployedAddressesEntries) {
  const chainId = entry.parentPath.match(chainIdRegex)?.[2];
  if (!chainId) {
    throw new Error(`chainId is missing in path ${entry.parentPath}`);
  }
  const fileContents = fs.readFileSync(path.join(entry.parentPath, entry.name), "utf-8");
  for (const [name, address] of Object.entries(JSON.parse(fileContents))) {
    const abi = abisByContractName[name];
    if (!abi) {
      throw new Error(`Can't find abi for deployed contract ${name} in chain ${chainId}`);
    }
    if (!deployedContracts[name]) deployedContracts[name] = { name, abi, address: {} };
    const addressMap = deployedContracts[name].address;
    addressMap[parseInt(chainId)] = address;
  }
}
if (process.env.DEBUG === "1") {
  console.log("deployedAddressesEntries", deployedAddressesEntries);
  console.log("artifactEntries", artifactEntries);
  console.log("deployedAddresses", deployedContracts);
}
var wagmi_config_default = defineConfig({
  out: "src/generated.ts",
  contracts: Object.values(deployedContracts),
  plugins: []
});
export {
  wagmi_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsid2FnbWkuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIi9ob21lL2JlZTM0NC9Eb2N1bWVudG9zL3Bhcml0eS9wb2xrYWRvdC10cmFjaW5nLWRhcC9mcm9udGVuZC93YWdtaS5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiL2hvbWUvYmVlMzQ0L0RvY3VtZW50b3MvcGFyaXR5L3BvbGthZG90LXRyYWNpbmctZGFwL2Zyb250ZW5kXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9ob21lL2JlZTM0NC9Eb2N1bWVudG9zL3Bhcml0eS9wb2xrYWRvdC10cmFjaW5nLWRhcC9mcm9udGVuZC93YWdtaS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIENvbnRyYWN0Q29uZmlnIH0gZnJvbSBcIkB3YWdtaS9jbGlcIjtcbmltcG9ydCB7IEFiaSB9IGZyb20gXCJ2aWVtXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5sZXQgZGlyRW50cmllczogZnMuRGlyZW50W10gPSBbXTtcblxuY29uc3QgZGVwbG95bWVudHNEaXIgPSBwYXRoLmpvaW4oXCIuLlwiLCBcImNvbnRyYWN0c1wiLCBcImlnbml0aW9uXCIsIFwiZGVwbG95bWVudHNcIik7XG5cbnRyeSB7XG4gIGRpckVudHJpZXMucHVzaChcbiAgICAuLi5mcy5yZWFkZGlyU3luYyhkZXBsb3ltZW50c0RpciwgeyByZWN1cnNpdmU6IHRydWUsIHdpdGhGaWxlVHlwZXM6IHRydWUgfSlcbiAgKTtcbn0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgaWYgKCEoZSBpbnN0YW5jZW9mIEVycm9yICYmIFwiY29kZVwiIGluIGUgJiYgZS5jb2RlID09PSBcIkVOT0VOVFwiKSkge1xuICAgIHRocm93IGU7XG4gIH1cblxuICBjb25zb2xlLndhcm4oYE5vIGNvbnRyYWN0cyBmb3VuZCBpbiAke2RlcGxveW1lbnRzRGlyfS4gRGVwbG95IG9uZSBmaXJzdC5gKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5jb25zdCBkZXBsb3llZEFkZHJlc3Nlc0VudHJpZXMgPSBkaXJFbnRyaWVzLmZpbHRlcigoZW50cnkpID0+IGVudHJ5Lm5hbWUgPT09IFwiZGVwbG95ZWRfYWRkcmVzc2VzLmpzb25cIik7XG5cbmNvbnN0IGFydGlmYWN0RW50cmllcyA9IGRpckVudHJpZXMuZmlsdGVyKFxuICAoZW50cnkpID0+IGVudHJ5LmlzRmlsZSgpICYmIGVudHJ5LnBhcmVudFBhdGguaW5jbHVkZXMoXCJhcnRpZmFjdHNcIikgJiYgZW50cnkubmFtZS5lbmRzV2l0aChcIi5qc29uXCIpICYmICFlbnRyeS5uYW1lLmVuZHNXaXRoKFwiLmRiZy5qc29uXCIpXG4pO1xuXG5pZiAoYXJ0aWZhY3RFbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICBjb25zb2xlLndhcm4oYE5vIGNvbnRyYWN0cyBmb3VuZCBpbiAke2RlcGxveW1lbnRzRGlyfS4gRGVwbG95IG9uZSBmaXJzdC5gKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5jb25zdCBhYmlzQnlDb250cmFjdE5hbWU6IFJlY29yZDxzdHJpbmcsIEFiaT4gPSB7fTtcblxuZm9yIChjb25zdCBlbnRyeSBvZiBhcnRpZmFjdEVudHJpZXMpIHtcbiAgY29uc3QgZmlsZUNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihlbnRyeS5wYXJlbnRQYXRoLCBlbnRyeS5uYW1lKSwgXCJ1dGYtOFwiKTtcbiAgY29uc3QgYWJpID0gSlNPTi5wYXJzZShmaWxlQ29udGVudHMpLmFiaSBhcyBBYmk7XG5cbiAgYWJpc0J5Q29udHJhY3ROYW1lW2VudHJ5Lm5hbWUucmVwbGFjZSgvXFwuanNvbiQvLCBcIlwiKV0gPSBhYmk7XG59XG5cbnR5cGUgQ29udHJhY3ROYW1lID0gc3RyaW5nO1xuY29uc3QgZGVwbG95ZWRDb250cmFjdHM6IFJlY29yZDxDb250cmFjdE5hbWUsIENvbnRyYWN0Q29uZmlnPiA9IHt9O1xuXG5jb25zdCBjaGFpbklkUmVnZXggPSAvKGNoYWluLSkoXFxkKykvO1xuZm9yIChjb25zdCBlbnRyeSBvZiBkZXBsb3llZEFkZHJlc3Nlc0VudHJpZXMpIHtcbiAgY29uc3QgY2hhaW5JZCA9IGVudHJ5LnBhcmVudFBhdGgubWF0Y2goY2hhaW5JZFJlZ2V4KT8uWzJdO1xuICBpZiAoIWNoYWluSWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNoYWluSWQgaXMgbWlzc2luZyBpbiBwYXRoICR7ZW50cnkucGFyZW50UGF0aH1gKTtcbiAgfVxuICBjb25zdCBmaWxlQ29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGVudHJ5LnBhcmVudFBhdGgsIGVudHJ5Lm5hbWUpLCBcInV0Zi04XCIpO1xuXG4gIGZvciAoY29uc3QgW25hbWUsIGFkZHJlc3NdIG9mIE9iamVjdC5lbnRyaWVzKEpTT04ucGFyc2UoZmlsZUNvbnRlbnRzKSkgYXMgW0NvbnRyYWN0TmFtZSwgYDB4JHtzdHJpbmd9YF1bXSkge1xuXG4gICAgY29uc3QgYWJpID0gYWJpc0J5Q29udHJhY3ROYW1lW25hbWVdO1xuICAgIGlmICghYWJpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGZpbmQgYWJpIGZvciBkZXBsb3llZCBjb250cmFjdCAke25hbWV9IGluIGNoYWluICR7Y2hhaW5JZH1gKTtcbiAgICB9XG5cbiAgICBpZiAoIWRlcGxveWVkQ29udHJhY3RzW25hbWVdKSBkZXBsb3llZENvbnRyYWN0c1tuYW1lXSA9IHsgbmFtZSwgYWJpLCBhZGRyZXNzOiB7fSB9O1xuICAgIGNvbnN0IGFkZHJlc3NNYXAgPSBkZXBsb3llZENvbnRyYWN0c1tuYW1lXS5hZGRyZXNzISBhcyBSZWNvcmQ8bnVtYmVyLCBgMHgke3N0cmluZ31gPjtcbiAgICBhZGRyZXNzTWFwW3BhcnNlSW50KGNoYWluSWQpXSA9IGFkZHJlc3M7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52LkRFQlVHID09PSBcIjFcIikge1xuICBjb25zb2xlLmxvZyhcImRlcGxveWVkQWRkcmVzc2VzRW50cmllc1wiLCBkZXBsb3llZEFkZHJlc3Nlc0VudHJpZXMpO1xuICBjb25zb2xlLmxvZyhcImFydGlmYWN0RW50cmllc1wiLCBhcnRpZmFjdEVudHJpZXMpO1xuICBjb25zb2xlLmxvZyhcImRlcGxveWVkQWRkcmVzc2VzXCIsIGRlcGxveWVkQ29udHJhY3RzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgb3V0OiBcInNyYy9nZW5lcmF0ZWQudHNcIiwgY29udHJhY3RzOiBPYmplY3QudmFsdWVzKGRlcGxveWVkQ29udHJhY3RzKSwgcGx1Z2luczogW11cbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFvVSxTQUFTLG9CQUFvQztBQUVqWCxPQUFPLFFBQVE7QUFDZixPQUFPLFVBQVU7QUFFakIsSUFBSSxhQUEwQixDQUFDO0FBRS9CLElBQU0saUJBQWlCLEtBQUssS0FBSyxNQUFNLGFBQWEsWUFBWSxhQUFhO0FBRTdFLElBQUk7QUFDRixhQUFXO0FBQUEsSUFDVCxHQUFHLEdBQUcsWUFBWSxnQkFBZ0IsRUFBRSxXQUFXLE1BQU0sZUFBZSxLQUFLLENBQUM7QUFBQSxFQUM1RTtBQUNGLFNBQVMsR0FBWTtBQUNuQixNQUFJLEVBQUUsYUFBYSxTQUFTLFVBQVUsS0FBSyxFQUFFLFNBQVMsV0FBVztBQUMvRCxVQUFNO0FBQUEsRUFDUjtBQUVBLFVBQVEsS0FBSyx5QkFBeUIsY0FBYyxxQkFBcUI7QUFDekUsVUFBUSxLQUFLLENBQUM7QUFDaEI7QUFFQSxJQUFNLDJCQUEyQixXQUFXLE9BQU8sQ0FBQyxVQUFVLE1BQU0sU0FBUyx5QkFBeUI7QUFFdEcsSUFBTSxrQkFBa0IsV0FBVztBQUFBLEVBQ2pDLENBQUMsVUFBVSxNQUFNLE9BQU8sS0FBSyxNQUFNLFdBQVcsU0FBUyxXQUFXLEtBQUssTUFBTSxLQUFLLFNBQVMsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsV0FBVztBQUN6STtBQUVBLElBQUksZ0JBQWdCLFdBQVcsR0FBRztBQUNoQyxVQUFRLEtBQUsseUJBQXlCLGNBQWMscUJBQXFCO0FBQ3pFLFVBQVEsS0FBSyxDQUFDO0FBQ2hCO0FBRUEsSUFBTSxxQkFBMEMsQ0FBQztBQUVqRCxXQUFXLFNBQVMsaUJBQWlCO0FBQ25DLFFBQU0sZUFBZSxHQUFHLGFBQWEsS0FBSyxLQUFLLE1BQU0sWUFBWSxNQUFNLElBQUksR0FBRyxPQUFPO0FBQ3JGLFFBQU0sTUFBTSxLQUFLLE1BQU0sWUFBWSxFQUFFO0FBRXJDLHFCQUFtQixNQUFNLEtBQUssUUFBUSxXQUFXLEVBQUUsQ0FBQyxJQUFJO0FBQzFEO0FBR0EsSUFBTSxvQkFBMEQsQ0FBQztBQUVqRSxJQUFNLGVBQWU7QUFDckIsV0FBVyxTQUFTLDBCQUEwQjtBQUM1QyxRQUFNLFVBQVUsTUFBTSxXQUFXLE1BQU0sWUFBWSxJQUFJLENBQUM7QUFDeEQsTUFBSSxDQUFDLFNBQVM7QUFDWixVQUFNLElBQUksTUFBTSw4QkFBOEIsTUFBTSxVQUFVLEVBQUU7QUFBQSxFQUNsRTtBQUNBLFFBQU0sZUFBZSxHQUFHLGFBQWEsS0FBSyxLQUFLLE1BQU0sWUFBWSxNQUFNLElBQUksR0FBRyxPQUFPO0FBRXJGLGFBQVcsQ0FBQyxNQUFNLE9BQU8sS0FBSyxPQUFPLFFBQVEsS0FBSyxNQUFNLFlBQVksQ0FBQyxHQUFzQztBQUV6RyxVQUFNLE1BQU0sbUJBQW1CLElBQUk7QUFDbkMsUUFBSSxDQUFDLEtBQUs7QUFDUixZQUFNLElBQUksTUFBTSx3Q0FBd0MsSUFBSSxhQUFhLE9BQU8sRUFBRTtBQUFBLElBQ3BGO0FBRUEsUUFBSSxDQUFDLGtCQUFrQixJQUFJLEVBQUcsbUJBQWtCLElBQUksSUFBSSxFQUFFLE1BQU0sS0FBSyxTQUFTLENBQUMsRUFBRTtBQUNqRixVQUFNLGFBQWEsa0JBQWtCLElBQUksRUFBRTtBQUMzQyxlQUFXLFNBQVMsT0FBTyxDQUFDLElBQUk7QUFBQSxFQUNsQztBQUNGO0FBRUEsSUFBSSxRQUFRLElBQUksVUFBVSxLQUFLO0FBQzdCLFVBQVEsSUFBSSw0QkFBNEIsd0JBQXdCO0FBQ2hFLFVBQVEsSUFBSSxtQkFBbUIsZUFBZTtBQUM5QyxVQUFRLElBQUkscUJBQXFCLGlCQUFpQjtBQUNwRDtBQUVBLElBQU8sdUJBQVEsYUFBYTtBQUFBLEVBQzFCLEtBQUs7QUFBQSxFQUFvQixXQUFXLE9BQU8sT0FBTyxpQkFBaUI7QUFBQSxFQUFHLFNBQVMsQ0FBQztBQUNsRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
